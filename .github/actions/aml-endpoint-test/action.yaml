name: Test AzureML managed online endpoint deployment (0% traffic deployment)
description: 'Finds 0% traffic deployment of an Azure ML endpoint and tests it.'

inputs:
  resourceGroup:
    description: 'Name of the resource group where the workspace is placed.'
    required: true
  workspaceName:
    description: 'Name of the workspace to work against.'
    required: true
  endpointFile:
    description: 'Path to the endpoint YAML file. Wildcard paths are supported which means that all matched endpoints will be deployed.'
    required: true
  requestFile:
    description: 'Name of the json test request file.'
    required: true

runs:
  using: "composite"
  steps:
    - name: Test endpoint deployments
      id: test-deployment
      shell: bash
      run: |
        set -e
        az configure --defaults workspace=${{ inputs.workspaceName }} group=${{ inputs.resourceGroup }}
        
        ENDPOINT_FILE=${{ inputs.endpointFile }}
        ENDPOINT_NAME=$(yq -r ".endpoint_name" $ENDPOINT_FILE)
        TEST_DEPLOYMENT_NAME=$(yq -r ".name" $ENDPOINT_FILE)
        echo $TEST_DEPLOYMENT_NAME
        deploymentresource=$(az ml batch-deployment list -e $ENDPOINT_NAME --query "[?name=='$TEST_DEPLOYMENT_NAME'].{Name:name}" -otsv)
        echo $deploymentresouce;
        if [[ $deploymentresouce == $TEST_DEPLOYMENT_NAME ]];
          then
          echo "found existing deployment to test"
          run_id=$(az ml batch-endpoint invoke --name $ENDPOINT_NAME --deployment $TEST_DEPLOYMENT_NAME --input ${{ inputs.requestFile }} --input-type uri_file --query name -o tsv) 
          
          # TODO: test that response is valid, fail with exit 1 if not
          status="Queued"
          while ! [[ $status =~ ^(Failed|Completed|Canceled)$ ]];
          do
            sleep 60s
            echo "Still Queued/ Running"
            status=$(az ml job show -n $run_id --query status -o tsv)
            echo $status
          done
          if [[ $status == "Completed" ]];
          then 
            echo "Job completed"      
          elif [[ $status == "Failed" ]];
          then 
            echo "Job failed"
            exit 1
          else
            echo "Job status not failed nor running nor completed"
            exit 2
          fi
        else
          echo "Existing deployment not found"
          exit 3
        fi